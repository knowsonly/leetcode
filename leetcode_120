class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int arr[n];
        arr[0]=triangle[0][0];
        for(int i=1;i<n;i++){
            int mindp=triangle[i][0];
            for(int j=1;j<i+1;j++){
                mindp=min(mindp,triangle[i][j]);
            }
            arr[i]=mindp;
        }
        int mindpp=0;
        for(int i=0;i<n;i++){
            mindpp=mindpp+arr[i];
        }
    return mindpp;}
};
只是考虑了每层的最小值，并未考虑相邻元素。可用动态规范解决。
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int dp[n];
        for (int i = 0; i < n; i++) {
            dp[i] = triangle[n - 1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<=i;j++){
                dp[j]=triangle[i][j]+min(dp[j],dp[j+1]);
            }
        }
    return dp[0];}
};
